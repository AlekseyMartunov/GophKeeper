// Code generated by MockGen. DO NOT EDIT.
// Source: userhandler.go

// Package mock_userhandlers is a generated GoMock package.
package mock_userhandlers

import (
	users "GophKeeper/internal/server/entity/users"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockuserService is a mock of userService interface.
type MockuserService struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceMockRecorder
}

// MockuserServiceMockRecorder is the mock recorder for MockuserService.
type MockuserServiceMockRecorder struct {
	mock *MockuserService
}

// NewMockuserService creates a new mock instance.
func NewMockuserService(ctrl *gomock.Controller) *MockuserService {
	mock := &MockuserService{ctrl: ctrl}
	mock.recorder = &MockuserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserService) EXPECT() *MockuserServiceMockRecorder {
	return m.recorder
}

// GetExternalID mocks base method.
func (m *MockuserService) GetExternalID(ctx context.Context, user users.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalID", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalID indicates an expected call of GetExternalID.
func (mr *MockuserServiceMockRecorder) GetExternalID(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalID", reflect.TypeOf((*MockuserService)(nil).GetExternalID), ctx, user)
}

// Save mocks base method.
func (m *MockuserService) Save(ctx context.Context, user users.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockuserServiceMockRecorder) Save(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockuserService)(nil).Save), ctx, user)
}

// MocktokenJWTManager is a mock of tokenJWTManager interface.
type MocktokenJWTManager struct {
	ctrl     *gomock.Controller
	recorder *MocktokenJWTManagerMockRecorder
}

// MocktokenJWTManagerMockRecorder is the mock recorder for MocktokenJWTManager.
type MocktokenJWTManagerMockRecorder struct {
	mock *MocktokenJWTManager
}

// NewMocktokenJWTManager creates a new mock instance.
func NewMocktokenJWTManager(ctrl *gomock.Controller) *MocktokenJWTManager {
	mock := &MocktokenJWTManager{ctrl: ctrl}
	mock.recorder = &MocktokenJWTManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenJWTManager) EXPECT() *MocktokenJWTManagerMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MocktokenJWTManager) CreateToken(ID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MocktokenJWTManagerMockRecorder) CreateToken(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MocktokenJWTManager)(nil).CreateToken), ID)
}

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *Mocklogger) Error(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", e)
}

// Error indicates an expected call of Error.
func (mr *MockloggerMockRecorder) Error(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*Mocklogger)(nil).Error), e)
}

// Info mocks base method.
func (m *Mocklogger) Info(s string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", s)
}

// Info indicates an expected call of Info.
func (mr *MockloggerMockRecorder) Info(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*Mocklogger)(nil).Info), s)
}
